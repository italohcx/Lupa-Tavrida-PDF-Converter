/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.parser.PdfTextExtractor;
import java.awt.Color;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import static java.lang.Thread.sleep;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import model.PDFTableModel;
import model.PDFparametro;

/**
 *
 * @author italo
 */
public class JframePDFReader extends javax.swing.JFrame {

    String parametroTavrida = "";
    PDFTableModel pdfTable = new PDFTableModel();
    boolean DEBUG = false;
    String verify;
    int verifyQtd = 0;
    int qtdPDFconvertidos = 0;
     int numParametros =0;
    String validaNumeroRepetido = "";
    String Serial = null;
    String S;
    String IA = null;
    String IB = "";
    String IC = "";
    String IN = "";
    String VA = "";
    String VB = "";
    String VC = "";
    String VR = "";
    String VS = "";
    String VT = "";
    File[] files = null;
    File arquivoPDF = null;
    String[] paramentrosReligador;
    List<String> dadoss = new ArrayList<>();
    List<PDFparametro> parametros = new ArrayList<>();
 

    public JframePDFReader() {
        initComponents();
        tablePDF.setModel(pdfTable);
        this.setIconImage((new javax.swing.ImageIcon(getClass().getResource("/images/Lupa_1.png")).getImage()));
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSlider1 = new javax.swing.JSlider();
        jPanel1 = new javax.swing.JPanel();
        btnPDF = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablePDF = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jLabelPDFLidos = new javax.swing.JLabel();
        jLQtdPDFlidos = new javax.swing.JLabel();
        jLabelPDFConvertidos = new javax.swing.JLabel();
        jLabelQtdConvertidos = new javax.swing.JLabel();
        jLabelSelecionar = new javax.swing.JLabel();
        jLabelSalvar = new javax.swing.JLabel();
        jLabelLimpar = new javax.swing.JLabel();
        jLabelVersão = new javax.swing.JLabel();
        arquivoUnicoCheckbox = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Lupa Tavrida PDF Converter");
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        btnPDF.setBackground(new java.awt.Color(255, 255, 255));
        btnPDF.setForeground(new java.awt.Color(255, 255, 255));
        btnPDF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-pdf-filled-50.png"))); // NOI18N
        btnPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPDFActionPerformed(evt);
            }
        });

        tablePDF.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tablePDF.setForeground(new java.awt.Color(51, 51, 51));
        tablePDF.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serial", "IA", "IB", "IC", "IN", "VA", "VB", "VC", "VR", "VS", "VT"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablePDF.setGridColor(new java.awt.Color(255, 255, 255));
        tablePDF.setName(""); // NOI18N
        tablePDF.setRowMargin(3);
        tablePDF.setSelectionBackground(new java.awt.Color(153, 153, 153));
        tablePDF.setSelectionForeground(new java.awt.Color(0, 0, 0));
        tablePDF.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tablePDF);

        btnSave.setBackground(new java.awt.Color(255, 255, 255));
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-save-filled-50.png"))); // NOI18N
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnClear.setBackground(new java.awt.Color(255, 255, 255));
        btnClear.setForeground(new java.awt.Color(255, 255, 255));
        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-erase-filled-50.png"))); // NOI18N
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        jLabelPDFLidos.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabelPDFLidos.setText("Arquivos PDF lidos:");

        jLQtdPDFlidos.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLQtdPDFlidos.setText("0");

        jLabelPDFConvertidos.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabelPDFConvertidos.setText("Arquivos PDF convertidos:");

        jLabelQtdConvertidos.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabelQtdConvertidos.setText("0");

        jLabelSelecionar.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabelSelecionar.setText("Selecionar");

        jLabelSalvar.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabelSalvar.setText("Salvar");

        jLabelLimpar.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabelLimpar.setText("Limpar");

        jLabelVersão.setText("Versão 2.3.0");

        arquivoUnicoCheckbox.setSelected(true);
        arquivoUnicoCheckbox.setText("Arquivo único");
        arquivoUnicoCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arquivoUnicoCheckboxActionPerformed(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Lupaicon.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabelSelecionar))
                            .addComponent(btnPDF))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(btnSave))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addComponent(jLabelSalvar)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(btnClear))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addComponent(jLabelLimpar)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabelPDFConvertidos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelQtdConvertidos))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabelPDFLidos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLQtdPDFlidos))
                            .addComponent(arquivoUnicoCheckbox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelVersão)
                        .addGap(15, 15, 15))
                    .addComponent(jLabel2))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnPDF)
                            .addComponent(btnSave)
                            .addComponent(btnClear))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabelSelecionar)
                                .addComponent(jLabelLimpar)
                                .addComponent(jLabelVersão))
                            .addComponent(jLabelSalvar)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLQtdPDFlidos)
                            .addComponent(jLabelPDFLidos))
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelPDFConvertidos)
                            .addComponent(jLabelQtdConvertidos))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(arquivoUnicoCheckbox)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void arquivoUnicoCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arquivoUnicoCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_arquivoUnicoCheckboxActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        pdfTable.removeRow();
        jLQtdPDFlidos.setText("0");
        jLabelQtdConvertidos.setText("0");
        verifyQtd = 0;
        numParametros = 0;
        jLabelPDFLidos.setText("Arquivos PDF lidos:");
        qtdPDFconvertidos = 0;
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed

        if(verifyQtd > 0){

            if(arquivoUnicoCheckbox.isSelected()){

                JFileChooser saveFile = new JFileChooser();

                saveFile.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

                int retorno = saveFile.showSaveDialog(jPanel1);

                if (retorno == 1) {
                    JOptionPane.showMessageDialog(null, "Por favor escolha um destino válido!");

                }

                if (retorno == JFileChooser.APPROVE_OPTION) {

                    File diretorio = saveFile.getSelectedFile();

                    System.out.println(diretorio);

                    PdfReader reader = null;
                    try {
                        reader = new PdfReader(new FileInputStream(arquivoPDF));
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(JframePDFReader.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(JframePDFReader.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    int numeroPaginas = reader.getNumberOfPages();

                    System.out.println("número de páginas: " + numeroPaginas);
                    String[] textoPagina = null;

                    for (int i = 1; i <= numeroPaginas; i++) {

                        PDFparametro parametro = new PDFparametro();
                        try {
                            textoPagina = PdfTextExtractor.getTextFromPage(reader, i).split("\n");

                        } catch (IOException ex) {
                            Logger.getLogger(JframePDFReader.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        for (String textoPagina1 : textoPagina) {
                            // System.out.println(textoPagina1);

                            if (textoPagina1.contains("Número")) {

                                String serial = textoPagina1;

                                if (serial.contains("/")) {

                                    Serial = serial.replaceAll("(\\d+-\\d+-\\d+|\\d+\\/\\d+\\/\\d+)", "").replaceAll("[\\sA-Za-zÀ-ú]*", "");

                                } else {

                                    Serial = serial.replaceAll("[0-9][0-9][.][0-9][0-9][.][0-9][0-9]", "").replaceAll("[\\sA-Za-zÀ-ú]*", "");
                                }
                            }

                            if (textoPagina1.contains("CIX1")) {
                                String ia = textoPagina1;
                                IA = ia.replaceAll("CIX?[0-9] V\\/kA - ", "").replaceAll("[\\sA-Za-zÀ-ú]*", "");

                                parametro.setSerial(Serial);
                                parametro.setIA(IA);

                                if(DEBUG){System.out.println("IA:" + IA);}

                            }

                            if (textoPagina1.contains("CIX2")) {
                                String ib = textoPagina1;
                                IB = ib.replaceAll("CIX?[0-9] V\\/kA - ", "");
                                parametro.setIB(IB);

                                if(DEBUG){System.out.println("IB:" + IB);}
                            }

                            if (textoPagina1.contains("CIX3")) {
                                String ic = textoPagina1;
                                IC = ic.replaceAll("CIX?[0-9] V\\/kA - ", "");
                                parametro.setIC(IC);

                                if(DEBUG){  System.out.println("IC:" + IC);}
                            }

                            if (textoPagina1.contains("CIXN")) {
                                String in = textoPagina1;
                                IN = in.replaceAll("CIX?[N] V\\/kA - ", "");
                                parametro.setIN(IN);

                                if(DEBUG){ System.out.println("IN:" + IN);}
                            }

                            if (textoPagina1.contains("CUX1")) {
                                String va = textoPagina1;
                                VA = va.replaceAll("\\sCUX?[0-9] V\\/kV -", "").replaceAll("[\\sA-Za-zÀ-ú]*", "");
                                parametro.setVA(VA);

                                if(DEBUG){System.out.println("VA:" + VA);}
                            }

                            if (textoPagina1.contains("CUX2")) {
                                String vb = textoPagina1;
                                VB = vb.replaceAll("CUX?[0-9] V\\/kV - ", "");
                                parametro.setVB(VB);

                                if(DEBUG){System.out.println("VB:" + VB);}
                            }

                            if (textoPagina1.contains("CUX3")) {
                                String vc = textoPagina1;
                                VC = vc.replaceAll("CUX?[0-9] V\\/kV - ", "");
                                parametro.setVC(VC);

                                if(DEBUG){System.out.println("VC:" + VC);}

                            }

                            if (textoPagina1.contains("CUX4")) {
                                String vr = textoPagina1;
                                VR = vr.replaceAll("CUX?[0-9] V\\/kV - ", "");

                                parametro.setVR(VR);

                                if(DEBUG){System.out.println("VR:" + VR);}
                            }

                            if (textoPagina1.contains("CUX5")) {
                                String vs = textoPagina1;
                                VS = vs.replaceAll("CUX?[0-9] V\\/kV - ", "");

                                parametro.setVS(VS);

                                if(DEBUG){ System.out.println("VS:" + VS);}

                            }

                            if (textoPagina1.contains("CUX6")) {
                                String vt = textoPagina1;
                                VT = vt.replaceAll("CUX?[0-9] V\\/kV - ", "");
                                parametro.setVT(VT);
                                if(DEBUG){ System.out.println("VT:" + VT);}
                            }

                        }

                        if(parametro.getSerial()!= null && parametro.getIA()!= null && parametro.getIB()!= null && parametro.getIC()!= null && parametro.getIN() != null &&
                            parametro.getVA() != null && parametro.getVB() != null && parametro.getVC() != null && parametro.getVR()!= null && parametro.getVS() != null && parametro.getVT() != null ){

                            parametroTavrida = "[GENERAL]\n"
                            + "MODEL=TAVRIDA OSM25\n"
                            + "SERIAL=" + parametro.getSerial() + "\n"
                            + "[CURRENT]\n"
                            + "PRI=2\n"
                            + "SEC=1\n"
                            + "PRIU=5\n"
                            + "SECU=3\n"
                            + "IA=" + parametro.getIA() + "\n"
                            + "IB=" + parametro.getIB() + "\n"
                            + "IC=" + parametro.getIC() + "\n"
                            + "IN=" + parametro.getIN() + "\n"
                            + "A=CIX1\n"
                            + "B=CIX2\n"
                            + "C=CIX3\n"
                            + "N=CIXN\n"
                            + "[VOLTAGE]\n"
                            + "PRI=0,12\n"
                            + "SEC=1\n"
                            + "PRIU=5\n"
                            + "SECU=6\n"
                            + "VA=" + parametro.getVA() + "\n"
                            + "VB=" + parametro.getVB() + "\n"
                            + "VC=" + parametro.getVC() + "\n"
                            + "VR=" + parametro.getVR() + "\n"
                            + "VS=" + parametro.getVS() + "\n"
                            + "VT=" + parametro.getVT() + "\n"
                            + "A=CUX1\n"
                            + "B=CUX2\n"
                            + "C=CUX3\n"
                            + "R=CUX4\n"
                            + "S=CUX5\n"
                            + "T=CUX6\n";

                            File arqTxt = new File(diretorio + "\\" + parametro.getSerial() + ".txt");

                                if (!arqTxt.exists()) {
                                    try {
                                        arqTxt.createNewFile();
                                        qtdPDFconvertidos++;
                                    } catch (IOException ex) {
                                        System.err.println("Erroooo");;
                                    }
                                }
                                // Prepara para escrever no arquivo
                                FileWriter fw = null;
                                try {
                                    fw = new FileWriter(arqTxt.getAbsoluteFile());
                                } catch (IOException ex) {
                                    System.out.println("Errrrrrrrrrrro");;
                                }
                                BufferedWriter bw = new BufferedWriter(fw);

                                try {
                                    // Escreve e fecha arquivo
                                    bw.write(parametroTavrida);
                                } catch (IOException ex) {
                                    System.err.println("Errrrrooo Io");
                                }
                                try {
                                    bw.close();

                                } catch (IOException ex) {
                                    System.err.println("Errrrrooooooo");
                                }
                            }

                        }

                        jLabelQtdConvertidos.setText(String.valueOf(qtdPDFconvertidos));
                        JOptionPane.showMessageDialog(null, "Parâmetros criados com sucesso!");

                        
                        for (int i = 0; i < parametros.size(); i++) {
                            
                            
                        PDFparametro parametro = parametros.get(i);
                              parametroTavrida = "[GENERAL]\n"
                            + "MODEL=TAVRIDA OSM25\n"
                            + "SERIAL=" + parametro.getSerial() + "\n"
                            + "[CURRENT]\n"
                            + "PRI=2\n"
                            + "SEC=1\n"
                            + "PRIU=5\n"
                            + "SECU=3\n"
                            + "IA=" + parametro.getIA() + "\n"
                            + "IB=" + parametro.getIB() + "\n"
                            + "IC=" + parametro.getIC() + "\n"
                            + "IN=" + parametro.getIN() + "\n"
                            + "A=CIX1\n"
                            + "B=CIX2\n"
                            + "C=CIX3\n"
                            + "N=CIXN\n"
                            + "[VOLTAGE]\n"
                            + "PRI=0,12\n"
                            + "SEC=1\n"
                            + "PRIU=5\n"
                            + "SECU=6\n"
                            + "VA=" + parametro.getVA() + "\n"
                            + "VB=" + parametro.getVB() + "\n"
                            + "VC=" + parametro.getVC() + "\n"
                            + "VR=" + parametro.getVR() + "\n"
                            + "VS=" + parametro.getVS() + "\n"
                            + "VT=" + parametro.getVT() + "\n"
                            + "A=CUX1\n"
                            + "B=CUX2\n"
                            + "C=CUX3\n"
                            + "R=CUX4\n"
                            + "S=CUX5\n"
                            + "T=CUX6\n";
                              
                        
                    }
                        
                        
                        
                        
                        
                    }

                } else {

                    JFileChooser saveFile = new JFileChooser();

                    saveFile.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

                    int retorno = saveFile.showSaveDialog(jPanel1);

                    if (retorno == 1) {
                        JOptionPane.showMessageDialog(null, "Por favor escolha um destino válido!");

                    }

                    if (retorno == JFileChooser.APPROVE_OPTION) {

                        File diretorio = saveFile.getSelectedFile();

                        System.out.println(diretorio);

                        for (int i = 0; i < files.length; i++) {

                            PdfReader reader = null;
                            PDFparametro parametro = new PDFparametro();
                            try {
                                reader = new PdfReader(new FileInputStream(files[i]));
                            } catch (FileNotFoundException ex) {
                                System.err.println("Sem doc");
                            } catch (IOException ex) {
                                System.err.println("Falha I/O");
                            }

                            String[] textoPagina = null;

                            try {
                                textoPagina = PdfTextExtractor.getTextFromPage(reader, 1).split("\n");
                            } catch (IOException ex) {
                                System.err.println("Erro I/O");
                            }

                            for (String textoPagina1 : textoPagina) {
                                String PDF = textoPagina1;

                                if (PDF.contains("Número")) {
                                    String serial = textoPagina1;

                                    if (serial.contains("/")) {
                                        Serial = serial.replaceAll("(\\d+-\\d+-\\d+|\\d+\\/\\d+\\/\\d+)", "").replaceAll("[\\sA-Za-zÀ-ú]*", "").replaceAll("[:]", "");
                                      
                                        parametro.setSerial(Serial);

                                    } else {

                                        Serial = serial.replaceAll("[0-9][0-9][.][0-9][0-9][.][0-9][0-9]", "").replaceAll("[\\sA-Za-zÀ-ú]*", "").replaceAll("[:]", "");
                                       
                                        parametro.setSerial(Serial);
                                    }

                                    System.out.println("[log]Serial Religador: " + Serial);

                                }

                                if (PDF.contains("CIX1")) {
                                    String ia = textoPagina1;
                                    IA = ia.replaceAll("CIX?[0-9] V\\/kA - ", "").replaceAll("[\\sA-Za-zÀ-ú]*", "");
                                    parametro.setIA(IA);

                                    System.out.println("[log]CIX1 " + IA);
                                }

                                if (PDF.contains("CIX2")) {
                                    String ib = textoPagina1;
                                    IB = ib.replaceAll("CIX?[0-9] V\\/kA - ", "");
                                    parametro.setIB(IB);

                                    System.out.println("[log]CIX2 " + IB);
                                }

                                if (PDF.contains("CIX3")) {
                                    String ic = textoPagina1;
                                    IC = ic.replaceAll("CIX?[0-9] V\\/kA - ", "");
                                    parametro.setIC(IC);

                                    System.out.println("[log]CIX3 " + IC);
                                }

                                if (PDF.contains("CIXN")) {
                                    String in = textoPagina1;
                                    IN = in.replaceAll("CIX?[N] V\\/kA - ", "");
                                    parametro.setIN(IN);

                                    System.out.println("[log]CIXN " + IN);
                                }

                                if (PDF.contains("CUX1")) {
                                    String va = textoPagina1;
                                    VA = va.replaceAll("\\sCUX?[0-9] V\\/kV -", "").replaceAll("[\\sA-Za-zÀ-ú]*", "");
                                    parametro.setVA(VA);

                                    System.out.println("[log]CUX1 " + VA);
                                }

                                if (PDF.contains("CUX2")) {
                                    String vb = textoPagina1;
                                    VB = vb.replaceAll("CUX?[0-9] V\\/kV - ", "");
                                    parametro.setVB(VB);

                                    System.out.println("[log]CUX2 " + VB);

                                }

                                if (PDF.contains("CUX3")) {
                                    String vc = textoPagina1;
                                    VC = vc.replaceAll("CUX?[0-9] V\\/kV - ", "");
                                    parametro.setVC(VC);

                                    System.out.println("[log]CUX3 " + VC);

                                }

                                if (PDF.contains("CUX4")) {
                                    String vr = textoPagina1;
                                    VR = vr.replaceAll("CUX?[0-9] V\\/kV - ", "");
                                    parametro.setVR(VR);

                                    System.out.println("[log]CUX4 " + VR);
                                }

                                if (PDF.contains("CUX5")) {
                                    String vs = textoPagina1;
                                    VS = vs.replaceAll("CUX?[0-9] V\\/kV - ", "");
                                    parametro.setVS(VS);

                                    System.out.println("[log]CUX5 " + VS);

                                }

                                if (PDF.contains("CUX6")) {
                                    String vt = textoPagina1;
                                    VT = vt.replaceAll("CUX?[0-9] V\\/kV - ", "");
                                    parametro.setVT(VT);

                                    System.out.println("[log]CUX6 " + VT);

                                }

                            }

                            parametroTavrida = "[GENERAL]\n"
                            + "MODEL=TAVRIDA OSM25\n"
                            + "SERIAL=" + parametro.getSerial() + "\n"
                            + "[CURRENT]\n"
                            + "PRI=2\n"
                            + "SEC=1\n"
                            + "PRIU=5\n"
                            + "SECU=3\n"
                            + "IA=" + parametro.getIA() + "\n"
                            + "IB=" + parametro.getIB() + "\n"
                            + "IC=" + parametro.getIC() + "\n"
                            + "IN=" + parametro.getIN() + "\n"
                            + "A=CIX1\n"
                            + "B=CIX2\n"
                            + "C=CIX3\n"
                            + "N=CIXN\n"
                            + "[VOLTAGE]\n"
                            + "PRI=0,12\n"
                            + "SEC=1\n"
                            + "PRIU=5\n"
                            + "SECU=6\n"
                            + "VA=" + parametro.getVA() + "\n"
                            + "VB=" + parametro.getVB() + "\n"
                            + "VC=" + parametro.getVC() + "\n"
                            + "VR=" + parametro.getVR() + "\n"
                            + "VS=" + parametro.getVS() + "\n"
                            + "VT=" + parametro.getVT() + "\n"
                            + "A=CUX1\n"
                            + "B=CUX2\n"
                            + "C=CUX3\n"
                            + "R=CUX4\n"
                            + "S=CUX5\n"
                            + "T=CUX6\n";

                            File arqTxt = new File(diretorio + "\\" + parametro.getSerial() + ".txt");

                                if (!arqTxt.exists()) {
                                    try {
                                        arqTxt.createNewFile();
                                        qtdPDFconvertidos++;
                                    } catch (IOException ex) {
                                        System.err.println("Erroooo");;
                                    }
                                }
                                // Prepara para escrever no arquivo
                                FileWriter fw = null;
                                try {
                                    fw = new FileWriter(arqTxt.getAbsoluteFile());
                                } catch (IOException ex) {
                                    System.out.println("Errrrrrrrrrrro");;
                                }
                                BufferedWriter bw = new BufferedWriter(fw);

                                try {
                                    // Escreve e fecha arquivo
                                    bw.write(parametroTavrida);
                                } catch (IOException ex) {
                                    System.err.println("Errrrrooo Io");
                                }
                                try {
                                    bw.close();

                                } catch (IOException ex) {
                                    System.err.println("Errrrrooooooo");
                                }
                            }

                            jLabelQtdConvertidos.setText(String.valueOf(qtdPDFconvertidos));
                            JOptionPane.showMessageDialog(null, "Parâmetros criados com sucesso!");

                        }

                    }
                }  else{

                    JOptionPane.showMessageDialog(null, "Por favor, escolha um ou mais arquivos PDF!");
                }

    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPDFActionPerformed

        if(arquivoUnicoCheckbox.isSelected()){

            JFileChooser arqPDF = new JFileChooser();// criaS janela de busca
            arqPDF.setDialogTitle("Selecionar PDF"); // Titulo da janela de busca
            arqPDF.setMultiSelectionEnabled(false);
            arqPDF.setFileSelectionMode(JFileChooser.FILES_ONLY);
            FileNameExtensionFilter filter = new FileNameExtensionFilter("PDF document", "pdf");
            arqPDF.setFileFilter(filter);
            int retorno = arqPDF.showOpenDialog(this);

            if (retorno == 1) {

                JOptionPane.showMessageDialog(null, "Por favor, escolha um arquivo PDF");
            }

            if (retorno == JFileChooser.APPROVE_OPTION) {

                arquivoPDF = arqPDF.getSelectedFile();

                PdfReader reader = null;
                verifyQtd = 1;
                try {
                    reader = new PdfReader(new FileInputStream(arquivoPDF));
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(JframePDFReader.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(JframePDFReader.class.getName()).log(Level.SEVERE, null, ex);
                }

                int numeroPaginas = reader.getNumberOfPages();

                System.out.println("número de páginas: " + numeroPaginas);
                String[] textoPagina = null;

                for (int i = 1; i <= numeroPaginas; i++) {

                    PDFparametro parametro = new PDFparametro();
                    try {
                        textoPagina = PdfTextExtractor.getTextFromPage(reader, i).split("\n");

                    } catch (IOException ex) {
                        Logger.getLogger(JframePDFReader.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    for (String textoPagina1 : textoPagina) {
                        // System.out.println(textoPagina1);

                        try {
                            
                             if (textoPagina1.contains("Número")) {

                            String serial = textoPagina1;

                            if (serial.contains("/")) {

                                Serial = serial.replaceAll("(\\d+-\\d+-\\d+|\\d+\\/\\d+\\/\\d+)", "").replaceAll("[\\sA-Za-zÀ-ú]*", "");

                            } else {

                                Serial = serial.replaceAll("[0-9][0-9][.][0-9][0-9][.][0-9][0-9]", "").replaceAll("[\\sA-Za-zÀ-ú]*", "");
                            }
                        }
                            
                        } catch (Exception e) {
                      
                           Serial = "Error";
                        }

                        try {

                            if (textoPagina1.contains("CIX1")) {
                                String ia = textoPagina1;
                                IA = ia.replaceAll("CIX?[0-9] V\\/kA - ", "").replaceAll("[\\sA-Za-zÀ-ú]*", "");
                                parametro.setSerial(Serial);
                                parametro.setIA(IA);
                                if (DEBUG) {
                                    System.out.println("IA:" + IA);
                                }
                            }

                        } catch (Exception e) {

                            IA = "Error";
                            parametro.setSerial(Serial);
                            parametro.setIA(IA);

                        }

                        try {

                            if (textoPagina1.contains("CIX2")) {
                                String ib = textoPagina1;
                                IB = ib.replaceAll("CIX?[0-9] V\\/kA - ", "");
                                parametro.setIB(IB);
                                if (DEBUG) {
                                    System.out.println("IB:" + IB);
                                }
                            }

                        } catch (Exception e) {

                            IB = "Error";
                            parametro.setIB(IB);

                        }

                        try {

                            if (textoPagina1.contains("CIX3")) {
                                String ic = textoPagina1;
                                IC = ic.replaceAll("CIX?[0-9] V\\/kA - ", "");
                                parametro.setIC(IC);

                                if (DEBUG) {
                                    System.out.println("IC:" + IC);
                                }
                            }

                        } catch (Exception e) {

                            IC = "Error";
                            parametro.setIC(IC);
                        }

                        try {

                            if (textoPagina1.contains("CIXN")) {
                                String in = textoPagina1;
                                IN = in.replaceAll("CIX?[N] V\\/kA - ", "");
                                parametro.setIN(IN);

                                if (DEBUG) {
                                    System.out.println("IN:" + IN);
                                }
                            }
                        } catch (Exception e) {

                            IN = "Error";

                            parametro.setIN(IN);

                        }

                        try {

                            if (textoPagina1.contains("CUX1")) {
                                String va = textoPagina1;
                                VA = va.replaceAll("\\sCUX?[0-9] V\\/kV -", "").replaceAll("[\\sA-Za-zÀ-ú]*", "");
                                parametro.setVA(VA);

                                if (DEBUG) {
                                    System.out.println("VA:" + VA);
                                }
                            }

                        } catch (Exception e) {

                            VA = "Error";
                            parametro.setVA(VA);

                        }

                        try {

                            if (textoPagina1.contains("CUX2")) {
                                String vb = textoPagina1;
                                VB = vb.replaceAll("CUX?[0-9] V\\/kV - ", "");
                                parametro.setVB(VB);

                                if (DEBUG) {
                                    System.out.println("VB:" + VB);
                                }
                            }

                        } catch (Exception e) {

                            VB = "Error";
                            parametro.setVB(VB);

                        }

                        try {

                            if (textoPagina1.contains("CUX3")) {
                                String vc = textoPagina1;
                                VC = vc.replaceAll("CUX?[0-9] V\\/kV - ", "");
                                parametro.setVC(VC);

                                if (DEBUG) {
                                    System.out.println("VC:" + VC);
                                }

                            }

                        } catch (Exception e) {

                            VC = "Error";
                            parametro.setVC(VC);
                        }

                        try {

                            if (textoPagina1.contains("CUX4")) {
                                String vr = textoPagina1;
                                VR = vr.replaceAll("CUX?[0-9] V\\/kV - ", "");
                                parametro.setVR(VR);
                                if (DEBUG) {
                                    System.out.println("VR:" + VR);
                                }
                            }

                        } catch (Exception e) {

                            VR = "Error";
                            parametro.setVR(VR);
                        }

                        try {

                            if (textoPagina1.contains("CUX5")) {
                                String vs = textoPagina1;
                                VS = vs.replaceAll("CUX?[0-9] V\\/kV - ", "");
                                parametro.setVS(VS);

                                if (DEBUG) {
                                    System.out.println("VS:" + VS);
                                }

                            }

                        } catch (Exception e) {

                            VS = "Error";
                            parametro.setVS(VS);
                        }

                        try {

                            if (textoPagina1.contains("CUX6")) {
                                String vt = textoPagina1;
                                VT = vt.replaceAll("CUX?[0-9] V\\/kV - ", "");
                                parametro.setVT(VT);
                                if (DEBUG) {
                                    System.out.println("VT:" + VT);
                                }
                            }

                        } catch (Exception e) {

                            VT = "Error";
                            parametro.setVT(VT);
                        }



                    }

                    if (parametro.getSerial() != null && parametro.getIA() != null && parametro.getIB() != null && parametro.getIC() != null && parametro.getIN() != null
                            && parametro.getVA() != null && parametro.getVB() != null && parametro.getVC() != null && parametro.getVR() != null && parametro.getVS() != null && parametro.getVT() != null) {
                        numParametros++;
                      //  System.out.println(parametro.toString());
                        pdfTable.addRow(parametro);
                        parametros.add(parametro);
                    }
                }

                jLabelPDFLidos.setText("Arquivos PDF extraidos:");
                jLQtdPDFlidos.setText(String.valueOf(numParametros));
                
                System.out.println("Tamanho Array:" + parametros.size());
            }

        }else{

            JFileChooser arqPDF = new JFileChooser();// criaS janela de busca
            arqPDF.setDialogTitle("Selecionar PDF"); // Titulo da janela de busca
            arqPDF.setMultiSelectionEnabled(true);
            arqPDF.setFileSelectionMode(JFileChooser.FILES_ONLY);
            FileNameExtensionFilter filter = new FileNameExtensionFilter("PDF document", "pdf");
            arqPDF.setFileFilter(filter);
            int retorno = arqPDF.showOpenDialog(this);

            if (retorno == 1) {

                JOptionPane.showMessageDialog(null, "Por favor, escolha um ou mais arquivos PDF");
            }

            if (retorno == JFileChooser.APPROVE_OPTION) {

                files = arqPDF.getSelectedFiles();
                for (int i = 0; i < files.length; i++) {
                    verifyQtd ++;

                    PdfReader reader = null;
                    PDFparametro parametro = new PDFparametro();
                    try {
                        reader = new PdfReader(new FileInputStream(files[i]));
                    } catch (FileNotFoundException ex) {
                        System.err.println("Sem doc");
                    } catch (IOException ex) {
                        System.err.println("Falha I/O");
                    }

                    String[] textoPagina = null;

                    try {
                        textoPagina = PdfTextExtractor.getTextFromPage(reader, 1).split("\n");
                    } catch (IOException ex) {
                        System.err.println("Erro I/O");
                    }

                    for (String textoPagina1 : textoPagina) {
                        String PDF = textoPagina1;

                        if (PDF.contains("Número")) {
                            String serial = textoPagina1;

                            if (serial.contains("/")) {

                                Serial = serial.replaceAll("(\\d+-\\d+-\\d+|\\d+\\/\\d+\\/\\d+)", "").replaceAll("[\\sA-Za-zÀ-ú]*", "");

                                parametro.setSerial(Serial);

                            } else {

                                Serial = serial.replaceAll("[0-9][0-9][.][0-9][0-9][.][0-9][0-9]", "").replaceAll("[\\sA-Za-zÀ-ú]*", "");
                                
                                parametro.setSerial(Serial);
                            }

                            System.out.println("Serial:" + Serial);
                        }

                        if (PDF.contains("CIX1")) {

                            String ia = textoPagina1;

                            IA = ia.replaceAll("CIX?[0-9] V\\/kA - ", "").replaceAll("[\\sA-Za-zÀ-ú]*", "");
                            parametro.setIA(IA);

                            System.out.println("IA:" + IA);

                        }

                        if (PDF.contains("CIX2")) {
                            String ib = textoPagina1;
                            IB = ib.replaceAll("CIX?[0-9] V\\/kA - ", "");
                            parametro.setIB(IB);

                            System.out.println("IB:" + IB);
                        }

                        if (PDF.contains("CIX3")) {
                            String ic = textoPagina1;
                            IC = ic.replaceAll("CIX?[0-9] V\\/kA - ", "");
                            parametro.setIC(IC);

                            System.out.println("IC:" + IC);
                        }

                        if (PDF.contains("CIXN")) {
                            String in = textoPagina1;
                            IN = in.replaceAll("CIX?[N] V\\/kA - ", "");
                            parametro.setIN(IN);

                            System.out.println("IN:" + IN);
                        }

                        if (PDF.contains("CUX1")) {
                            String va = textoPagina1;
                            VA = va.replaceAll("\\sCUX?[0-9] V\\/kV -", "").replaceAll("[\\sA-Za-zÀ-ú]*", "");
                            parametro.setVA(VA);

                            System.out.println("VA:" + VA);
                        }

                        if (PDF.contains("CUX2")) {
                            String vb = textoPagina1;
                            VB = vb.replaceAll("CUX?[0-9] V\\/kV - ", "");
                            parametro.setVB(VB);

                            System.out.println("VB:" + VB);
                        }

                        if (PDF.contains("CUX3")) {
                            String vc = textoPagina1;
                            VC = vc.replaceAll("CUX?[0-9] V\\/kV - ", "");
                            parametro.setVC(VC);

                            System.out.println("VC:" + VC);

                        }

                        if (PDF.contains("CUX4")) {
                            String vr = textoPagina1;
                            VR = vr.replaceAll("CUX?[0-9] V\\/kV - ", "");
                            parametro.setVR(VR);

                            System.out.println("VR:" + VR);
                        }

                        if (PDF.contains("CUX5")) {
                            String vs = textoPagina1;
                            VS = vs.replaceAll("CUX?[0-9] V\\/kV - ", "");
                            parametro.setVS(VS);

                            System.out.println("VS:" + VS);

                        }

                        if (PDF.contains("CUX6")) {
                            String vt = textoPagina1;
                            VT = vt.replaceAll("CUX?[0-9] V\\/kV - ", "");
                            parametro.setVT(VT);

                            System.out.println("VT:" + VT);
                        }

                    }

                    pdfTable.addRow(parametro);
                    jLQtdPDFlidos.setText(String.valueOf(files.length));

                }

            }
        }
    }//GEN-LAST:event_btnPDFActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JframePDFReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JframePDFReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JframePDFReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JframePDFReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JframePDFReader().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox arquivoUnicoCheckbox;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnPDF;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLQtdPDFlidos;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelLimpar;
    private javax.swing.JLabel jLabelPDFConvertidos;
    private javax.swing.JLabel jLabelPDFLidos;
    private javax.swing.JLabel jLabelQtdConvertidos;
    private javax.swing.JLabel jLabelSalvar;
    private javax.swing.JLabel jLabelSelecionar;
    private javax.swing.JLabel jLabelVersão;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTable tablePDF;
    // End of variables declaration//GEN-END:variables
}
